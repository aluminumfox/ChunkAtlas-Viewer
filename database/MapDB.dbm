<?xml version="1.0" encoding="UTF-8"?>
<!--
CAUTION: Do not modify this file unless you know what you are doing.
         Unexpected results may occur if the code is changed deliberately.
-->
<dbmodel pgmodeler-ver="0.9.2-beta" last-position="0,0" last-zoom="0.95" max-obj-count="7"
	 default-schema="public" default-owner="postgres">
<database name="MapDB" is-template="false" allow-conns="true">
</database>

<schema name="public" layer="0" rect-visible="true" fill-color="#e1e1e1" sql-disabled="true">
</schema>

<table name="map_tiles" layer="0" collapse-mode="1" max-obj-count="7">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="50" y="50"/>
	<column name="tile_id" not-null="true"
	 identity-type="ALWAYS">
		<type name="smallint" length="0"/>
	</column>
	<column name="image_resource_id" not-null="true">
		<type name="smallint" length="0"/>
	</column>
	<column name="region_name" not-null="true">
		<type name="varchar" length="16"/>
	</column>
	<column name="map_type" not-null="true">
		<type name="varchar" length="16"/>
	</column>
	<column name="tile_size" not-null="true">
		<type name="smallint" length="0"/>
	</column>
	<column name="chunk_coordinates" not-null="true">
		<type name="point" length="0"/>
	</column>
	<constraint name="map_tiles_pk" type="pk-constr" table="public.map_tiles">
		<columns names="tile_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="map_tiles_nonempty_strings" type="ck-constr" table="public.map_tiles">
			<expression><![CDATA[(region_name='') IS NOT TRUE
AND (map_type='') IS NOT TRUE]]></expression>
	</constraint>
	<constraint name="map_tiles_positive_size" type="ck-constr" table="public.map_tiles">
			<expression><![CDATA[tile_size > 0]]></expression>
	</constraint>
</table>

<table name="key_items" layer="0" collapse-mode="1" max-obj-count="7">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[Prevent insertion of multiple rows with the same description, region, and map type.]]></comment>
	<position x="228.077" y="50"/>
	<column name="key_id" not-null="true"
	 identity-type="ALWAYS">
		<type name="smallint" length="0"/>
	</column>
	<column name="description">
		<type name="varchar" length="64"/>
	</column>
	<column name="region_name" not-null="true">
		<type name="varchar" length="16"/>
	</column>
	<column name="map_type" not-null="true">
		<type name="varchar" length="16"/>
	</column>
	<column name="icon_resource_id">
		<type name="smallint" length="0"/>
	</column>
	<column name="color" default-value="'000000'">
		<type name="char" length="6"/>
	</column>
	<constraint name="key_items_pk" type="pk-constr" table="public.key_items">
		<columns names="key_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="key_items_nonempty_strings" type="ck-constr" table="public.key_items">
			<expression><![CDATA[(description = '') IS NOT TRUE
AND (region_name='') IS NOT TRUE
AND (map_type='') IS NOT TRUE ]]></expression>
	</constraint>
	<constraint name="key_items_color_or_icon" type="ck-constr" table="public.key_items">
			<expression><![CDATA[color IS NOT NULL OR icon_resource_id IS NOT NULL]]></expression>
	</constraint>
</table>

<table name="directory" layer="0" collapse-mode="1" max-obj-count="6">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="394.889" y="50"/>
	<column name="location_name" not-null="true">
		<type name="varchar" length="64"/>
	</column>
	<column name="icon_resource_id">
		<type name="smallint" length="256"/>
	</column>
	<column name="region_name" not-null="true">
		<type name="varchar" length="16"/>
	</column>
	<column name="coordinates" not-null="true">
		<type name="point" length="0"/>
	</column>
	<column name="color" default-value="'000000'">
		<type name="char" length="6"/>
	</column>
	<constraint name="directory_location_name_pk" type="pk-constr" table="public.directory">
		<columns names="location_name" ref-type="src-columns"/>
	</constraint>
	<constraint name="directory_location_name_unique" type="uq-constr" table="public.directory">
		<columns names="location_name" ref-type="src-columns"/>
	</constraint>
	<constraint name="directory_location_name_nonempty" type="ck-constr" table="public.directory">
			<expression><![CDATA[(location_name='') IS NOT TRUE]]></expression>
	</constraint>
</table>

<table name="image_resources" layer="0" collapse-mode="1" max-obj-count="3">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="561.701" y="50"/>
	<column name="resource_id" not-null="true"
	 identity-type="ALWAYS">
		<type name="smallint" length="0"/>
	</column>
	<column name="image_url" not-null="true">
		<type name="varchar" length="256"/>
	</column>
	<column name="resource_loaded" default-value="false">
		<type name="bool" length="0"/>
	</column>
	<constraint name="image_resources_pk" type="pk-constr" table="public.image_resources">
		<columns names="resource_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="image_resources_url_unique" type="uq-constr" table="public.image_resources">
		<columns names="image_url" ref-type="src-columns"/>
	</constraint>
	<constraint name="image_resources_url_nonempty" type="ck-constr" table="public.image_resources">
			<expression><![CDATA[(image_url='') IS NOT TRUE]]></expression>
	</constraint>
</table>

<function name="image_resources_update_or_add"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[Updates a resource to add a new update time, or adds it if it doesn't already exist, returning the resource id.]]></comment>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="smallint" length="0"/>
	</return-type>
	<parameter name="resource_url" in="true">
		<type name="varchar" length="256"/>
	</parameter>
	<parameter name="set_loaded" in="true" default-value="false">
		<type name="bool" length="0"/>
	</parameter>
	<definition><![CDATA[WITH new_or_existing AS
(
	INSERT INTO image_resources(image_url)
	VALUES(resource_url)
	ON CONFLICT(image_url) DO UPDATE
	SET resource_loaded = set_loaded
	RETURNING resource_id
)
SELECT * FROM new_or_existing]]></definition>
</function>

<function name="apply_staging"
		window-func="false"
		returns-setof="false"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[Overwrites the main key and tile tables with data from the staging tables, and clears the staging tables.]]></comment>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="void" length="0"/>
	</return-type>
	<definition><![CDATA[WITH resource_staging AS
(
	SELECT ir.image_url, ir.resource_id
	FROM image_resources ir
	WHERE EXISTS 
	(
		SELECT image_resource_id
		FROM staging_map_tiles mt
		WHERE mt.image_resource_id = ir.resource_id
	)
	OR EXISTS
	(
		SELECT icon_resource_id
		FROM staging_key_items ki
		WHERE ki.icon_resource_id = ir.resource_id
	)
)
UPDATE image_resources ir
	SET resource_loaded = TRUE
	FROM resource_staging rs
	WHERE rs.resource_id = ir.resource_id
	AND rs.image_url IS NOT NULL;
TRUNCATE key_items;
INSERT INTO key_items (description, region_name, map_type, icon_resource_id, color)
	SELECT description, region_name, map_type, icon_resource_id, color
	FROM staging_key_items;
TRUNCATE staging_key_items;
TRUNCATE map_tiles;
INSERT INTO map_tiles (image_resource_id, region_name, map_type, tile_size, chunk_coordinates)
	SELECT image_resource_id, region_name, map_type, tile_size, chunk_coordinates
	FROM staging_map_tiles;

TRUNCATE staging_map_tiles;]]></definition>
</function>

<table name="staging_key_items" layer="0" collapse-mode="1" max-obj-count="7">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="757.042" y="50"/>
	<column name="staging_key_id" not-null="true"
	 identity-type="ALWAYS">
		<type name="smallint" length="0"/>
	</column>
	<column name="description">
		<type name="varchar" length="64"/>
	</column>
	<column name="region_name" not-null="true">
		<type name="varchar" length="16"/>
	</column>
	<column name="map_type" not-null="true">
		<type name="varchar" length="16"/>
	</column>
	<column name="icon_resource_id">
		<type name="smallint" length="0"/>
	</column>
	<column name="color" default-value="'000000'">
		<type name="char" length="6"/>
	</column>
	<constraint name="staging_key_items_pk" type="pk-constr" table="public.staging_key_items">
		<columns names="staging_key_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="staging_key_items_nonempty_strings" type="ck-constr" table="public.staging_key_items">
			<expression><![CDATA[(description = '') IS NOT TRUE
AND (region_name='') IS NOT TRUE
AND (map_type='') IS NOT TRUE ]]></expression>
	</constraint>
	<constraint name="staging_key_items_color_or_icon" type="ck-constr" table="public.staging_key_items">
			<expression><![CDATA[color IS NOT NULL OR icon_resource_id IS NOT NULL]]></expression>
	</constraint>
</table>

<function name="get_regions"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="3">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[Gets all unique region names within the database.]]></comment>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="varchar" length="16"/>
	</return-type>
	<definition><![CDATA[SELECT DISTINCT tiles.region_name
FROM map_tiles tiles
JOIN key_items key on tiles.region_name = key.region_name
JOIN directory dir on tiles.region_name = dir.region_name]]></definition>
</function>

<function name="get_map_types"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="6">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[Gets all unique map types within the database.]]></comment>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="varchar" length="16"/>
	</return-type>
	<definition><![CDATA[SELECT DISTINCT tiles.map_type
FROM map_tiles tiles
JOIN key_items ki ON tiles.map_type = ki.map_type
JOIN directory dir ON tiles.map_type = dir.map_type]]></definition>
</function>

<function name="image_resources_find_or_add"
		window-func="false"
		returns-setof="false"
		behavior-type="RETURNS NULL ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="0">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[Updates a resource to add a new update time, or adds it if it doesn't already exist, returning the resource id.]]></comment>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="smallint" length="0"/>
	</return-type>
	<parameter name="resource_url" in="true">
		<type name="varchar" length="256"/>
	</parameter>
	<parameter name="set_loaded" in="true" default-value="false">
		<type name="bool" length="0"/>
	</parameter>
	<definition><![CDATA[WITH new_or_existing AS
(
	INSERT INTO image_resources(image_url)
	VALUES(resource_url)
	ON CONFLICT(image_url) DO UPDATE
	SET image_url = resource_url
	RETURNING resource_id
)
SELECT * FROM new_or_existing]]></definition>
</function>

<table name="staging_map_tiles" layer="0" collapse-mode="1" max-obj-count="7">
	<schema name="public"/>
	<role name="postgres"/>
	<position x="50" y="274.6"/>
	<column name="tile_id" not-null="true"
	 identity-type="ALWAYS">
		<type name="smallint" length="0"/>
	</column>
	<column name="image_resource_id" not-null="true">
		<type name="smallint" length="0"/>
	</column>
	<column name="region_name" not-null="true">
		<type name="varchar" length="16"/>
	</column>
	<column name="map_type" not-null="true">
		<type name="varchar" length="16"/>
	</column>
	<column name="tile_size" not-null="true">
		<type name="smallint" length="0"/>
	</column>
	<column name="chunk_coordinates" not-null="true">
		<type name="point" length="0"/>
	</column>
	<constraint name="staging_map_tiles_pk" type="pk-constr" table="public.staging_map_tiles">
		<columns names="tile_id" ref-type="src-columns"/>
	</constraint>
	<constraint name="staging_map_tiles_nonempty_strings" type="ck-constr" table="public.staging_map_tiles">
			<expression><![CDATA[(region_name='') IS NOT TRUE
AND (map_type='') IS NOT TRUE]]></expression>
	</constraint>
	<constraint name="staging_map_tiles_positive_size" type="ck-constr" table="public.staging_map_tiles">
			<expression><![CDATA[tile_size > 0]]></expression>
	</constraint>
</table>

<rule name="staging_key_items_ignore_duplicates" event-type="ON INSERT" exec-type="INSTEAD"
 table="public.staging_key_items">
		<comment><![CDATA[Prevent insertion of multiple rows with the same description, region, and map type.]]></comment>
		<condition><![CDATA[EXISTS (SELECT * FROM staging_key_items WHERE
	staging_key_items.description = NEW.description
	AND staging_key_items.region_name = NEW.region_name
	AND staging_key_items.map_type = NEW.map_type)
	]]></condition>
</rule>

<rule name="key_items_ignore_duplicates" event-type="ON INSERT" exec-type="INSTEAD"
 table="public.key_items">
		<condition><![CDATA[EXISTS (SELECT * FROM key_items WHERE
	key_items.description = NEW.description
	AND key_items.region_name = NEW.region_name
	AND key_items.map_type = NEW.map_type)
	]]></condition>
</rule>

<rule name="map_tiles_prevent_duplicates" event-type="ON INSERT" exec-type="INSTEAD"
 table="public.map_tiles">
		<comment><![CDATA[Prevent insertion of multiple rows with the same region name, map type, tile size, and coordinates.]]></comment>
		<condition><![CDATA[EXISTS (SELECT * FROM map_tiles WHERE
	map_tiles.region_name = NEW.region_name
	AND map_tiles.map_type = NEW.map_type
	AND map_tiles.tile_size = NEW.tile_size
	AND map_tiles.chunk_coordinates ~= NEW.chunk_coordinates)]]></condition>
</rule>

<rule name="staging_map_tiles_prevent_duplicates" event-type="ON INSERT" exec-type="INSTEAD"
 table="public.staging_map_tiles">
		<comment><![CDATA[Prevent insertion of rows with the same region, map type, size, and coordinates.]]></comment>
		<condition><![CDATA[EXISTS (SELECT * FROM staging_map_tiles WHERE
	staging_map_tiles.region_name = NEW.region_name
	AND staging_map_tiles.map_type = NEW.map_type
	AND staging_map_tiles.tile_size = NEW.tile_size
	AND staging_map_tiles.chunk_coordinates ~= NEW.chunk_coordinates)]]></condition>
</rule>

<function name="get_tile_sizes"
		window-func="false"
		returns-setof="true"
		behavior-type="CALLED ON NULL INPUT"
		function-type="VOLATILE"
		security-type="SECURITY INVOKER"
		execution-cost="1"
		row-amount="4">
	<schema name="public"/>
	<role name="postgres"/>
	<comment><![CDATA[Gets all map tile resolutions available.]]></comment>
	<language name="sql" sql-disabled="true"/>
	<return-type>
	<type name="smallint" length="0"/>
	</return-type>
	<definition><![CDATA[SELECT DISTINCT tile_size FROM map_tiles]]></definition>
</function>

<constraint name="map_tiles_image_resource_id" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="public.image_resources" table="public.map_tiles">
	<columns names="image_resource_id" ref-type="src-columns"/>
	<columns names="resource_id" ref-type="dst-columns"/>
</constraint>

<constraint name="key_items_icon_resource_id_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="SET NULL" ref-table="public.image_resources" table="public.key_items">
	<columns names="icon_resource_id" ref-type="src-columns"/>
	<columns names="resource_id" ref-type="dst-columns"/>
</constraint>

<constraint name="directory_icon_resource_id_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="NO ACTION" ref-table="public.image_resources" table="public.directory">
	<columns names="icon_resource_id" ref-type="src-columns"/>
	<columns names="resource_id" ref-type="dst-columns"/>
</constraint>

<constraint name="staging_key_items_icon_resource_id_fk" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="SET NULL" ref-table="public.image_resources" table="public.staging_key_items">
	<columns names="icon_resource_id" ref-type="src-columns"/>
	<columns names="resource_id" ref-type="dst-columns"/>
</constraint>

<constraint name="staging_map_tiles_image_resource_id" type="fk-constr" comparison-type="MATCH FULL"
	 upd-action="NO ACTION" del-action="CASCADE" ref-table="public.image_resources" table="public.staging_map_tiles">
	<columns names="image_resource_id" ref-type="src-columns"/>
	<columns names="resource_id" ref-type="dst-columns"/>
</constraint>

<relationship name="rel_map_tiles_image_resources" type="relfk" layer="0"
	 src-table="public.map_tiles"
	 dst-table="public.image_resources" reference-fk="map_tiles_image_resource_id"
	 src-required="false" dst-required="false"/>

<relationship name="rel_key_items_image_resources" type="relfk" layer="0"
	 src-table="public.key_items"
	 dst-table="public.image_resources" reference-fk="key_items_icon_resource_id_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_key_items_cp_image_resources" type="relfk" layer="0"
	 src-table="public.staging_key_items"
	 dst-table="public.image_resources" reference-fk="staging_key_items_icon_resource_id_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_directory_image_resources" type="relfk" layer="0"
	 src-table="public.directory"
	 dst-table="public.image_resources" reference-fk="directory_icon_resource_id_fk"
	 src-required="false" dst-required="false"/>

<relationship name="rel_map_tiles_cp_image_resources" type="relfk" layer="0"
	 src-table="public.staging_map_tiles"
	 dst-table="public.image_resources" reference-fk="staging_map_tiles_image_resource_id"
	 src-required="false" dst-required="false"/>

</dbmodel>
